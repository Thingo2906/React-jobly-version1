{
    "version": 3,
    "sources": ["hooks/useLocalStorage.js", "auth/UserContext.js", "nav/NavBar.js", "homepage/Homepage.js", "common/SearchForm.js", "companies/CompanyCard.js", "api.js", "common/LoadingSpinner.js", "companies/CompanyList.js", "jobs/JobCard.js", "jobs/JobCardList.js", "jobs/JobList.js", "companies/CompanyDetail.js", "common/Alert.js", "auth/LoginForm.js", "profiles/ProfileForm.js", "auth/SignupForm.js", "routes/PrivateRoute.js", "routes/Routes.js", "App.js", "serviceWorker.js", "index.js"],
    "names": ["useLocalStorage", "key", "firstValue", "arguments", "length", "undefined", "INITIAL_VALUE", "localStorage", "getItem", "_useState", "useState", "_useState2", "Object", "slicedToArray", "item", "setItem", "useEffect", "console", "debug", "removeItem", "UserContext", "React", "createContext", "NavBar", "_ref", "logout", "currentUser", "useContext", "react_default", "a", "createElement", "reactstrap_es", "className", "color", "dark", "href", "navbar", "react_router_dom", "to", "onClick", "first_name", "username", "Homepage", "firstName", "SearchForm", "searchFor", "searchTerm", "setSearchTerm", "onSubmit", "evt", "preventDefault", "trim", "name", "placeholder", "value", "onChange", "target", "type", "CompanyCard", "description", "logoUrl", "handle", "react_router_dom_min", "concat", "src", "alt", "JoblyApi", "endpoint", "data", "method", "url", "process", "headers", "Authorization", "token", "params", "axios", "error", "_context", "t0", "response", "message", "Array", "isArray", "this", "request", "res", "user", "company", "companies", "title", "jobs", "id", "LoadingSpinner", "index_es", "icon", "faSpinner", "CompanyList", "setCompanies", "search", "_x", "_search", "apply", "asyncToGenerator", "CompanyList_regeneratorRuntime", "mark", "_callee", "wrap", "prev", "next", "getCompanies", "sent", "stop", "common_SearchForm", "map", "c", "companies_CompanyCard", "common_LoadingSpinner", "JobCard", "salary", "equity", "companyName", "_useContext", "hasAppliedToJob", "applyToJob", "applied", "setApplied", "_handleApply", "JobCard_regeneratorRuntime", "abrupt", "digitsRev", "salaryStr", "toString", "i", "push", "reverse", "join", "formatSalary", "disabled", "JobCardList", "job", "jobs_JobCard", "JobList", "setJobs", "JobList_regeneratorRuntime", "getJobs", "jobs_JobCardList", "CompanyDetail", "useParams", "setCompany", "_getCompany", "CompanyDetail_regeneratorRuntime", "getCompany", "t1", "Alert", "_ref$type", "_ref$messages", "messages", "role", "err", "LoginForm", "login", "history", "useHistory", "password", "formData", "setFormData", "_useState3", "_useState4", "formErrors", "setFormErrors", "handleSubmit", "_handleSubmit", "LoginForm_regeneratorRuntime", "success", "errors", "handleChange", "_evt$target", "l", "objectSpread", "defineProperty", "autoComplete", "required", "common_Alert", "ProfileForm", "setCurrentUser", "lastName", "email", "_useState5", "_useState6", "saveConfirmed", "setSaveConfirmed", "ProfileForm_regeneratorRuntime", "profileData", "updatedUser", "saveProfile", "f", "signupForm", "signup", "SignupForm_regeneratorRuntime", "result", "PrivateRoute", "exact", "path", "children", "react_router", "Routes", "register", "homepage_Homepage", "auth_LoginForm", "SignupForm", "routes_PrivateRoute", "companies_CompanyList", "jobs_JobList", "companies_CompanyDetail", "profiles_ProfileForm", "TOKEN_STORAGE_ID", "App", "infoLoaded", "setInfoLoaded", "Set", "applicationIds", "setApplicationIds", "_useLocalStorage", "_useLocalStorage2", "setToken", "_signup", "App_regeneratorRuntime", "_callee2", "signupData", "_token", "_context2", "_login", "_callee3", "loginData", "_token2", "_context3", "has", "_getCurrentUser", "_jwt$decode", "_currentUser", "jwt", "decode", "getCurrentUser", "applications", "auth_UserContext", "Provider", "toConsumableArray", "nav_NavBar", "routes_Routes", "_x2", "Boolean", "window", "location", "hostname", "match", "ReactDOM", "render", "src_App", "document", "getElementById", "navigator", "serviceWorker", "ready", "then", "registration", "unregister"],
    "mappings": "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",
    "file": "static/js/main.a43140b7.chunk.js",
    "sourcesContent": ["import { useState, useEffect } from \"react\";\r\n\r\n/** Custom hook for keeping state data synced with localStorage.\r\n *\r\n * This creates `item` as state and look in localStorage for current value\r\n * (if not found, defaults to `firstValue`)\r\n *\r\n * When `item` changes, effect re-runs:\r\n * - if new state is null, removes from localStorage\r\n * - else, updates localStorage\r\n *\r\n * To the component, this just acts like state that is also synced to/from\r\n * localStorage::\r\n * */\r\n\r\nconst useLocalStorage = (key, firstValue = null) => {\r\n    const INITIAL_VALUE = localStorage.getItem(key) || firstValue;\r\n    const [item, setItem] = useState(INITIAL_VALUE);\r\n\r\n    useEffect(function setKeyInLocalStorage() {\r\n        console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\r\n\r\n        if (item === null) {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, item);\r\n        }\r\n    }, [key, item]);\r\n    return [item, setItem];\r\n}\r\n\r\nexport default useLocalStorage;", "import React from \"react\";\r\n\r\n//UserContext will provide the currentUser obj and setter throughout the app.\r\n\r\nconst UserContext = React.createContext();\r\n\r\nexport default UserContext;", "import React, { useContext } from \"react\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Navbar, NavbarBrand, Nav, NavItem } from \"reactstrap\";\r\n\r\n//Navbar - displays on every page of the app.\r\n//When user is logged in, shows links to main areas of site. \r\n//When logout shows link to Login and Signup forms.\r\n\r\nconst NavBar = ({ logout }) => {\r\n    const { currentUser } = useContext(UserContext);\r\n    console.debug(\"Navigation\", \"currentUser=\", currentUser);\r\n\r\n    const loggedInNav = () => {\r\n        return (\r\n            <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavLink className=\"nav-link\" to=\"/companies\">\r\n                        Companies\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink className=\"nav-link\" to=\"/jobs\">\r\n                        Jobs\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink className=\"nav-link\" to=\"/profile\">\r\n                        Profile\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <Link className=\"nav-link\" to=\"/\" onClick={logout}>\r\n                        Log out {currentUser.first_name || currentUser.username}\r\n                    </Link>\r\n                </NavItem>\r\n            </Nav>\r\n        )\r\n    }\r\n\r\n    const loggedOutNav = () => {\r\n        return (\r\n            <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                    <NavLink className=\"nav-link\" to=\"/login\">\r\n                        Login\r\n                    </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                    <NavLink className=\"nav-link\" to=\"/signup\">\r\n                        Sign Up\r\n                    </NavLink>\r\n                </NavItem>\r\n            </Nav>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Navbar className=\"Navigation navbar-expand-lg\" color=\"secondary\" dark>\r\n            <NavbarBrand href=\"/\">\r\n                Jobly\r\n            </NavbarBrand>\r\n            {currentUser ? loggedInNav() : loggedOutNav()}\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n", "import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../auth/UserContext\";\r\n// import \"./Homepage.css\";\r\n\r\n//Jobly's Homepage\r\n//Shows welcome message or login/register buttons.\r\n\r\nconst Homepage = () => {\r\n    const { currentUser } = useContext(UserContext);\r\n    console.debug(\"Homepage\", \"currentUser=\", currentUser);\r\n\r\n    return (\r\n        <div className=\"Homepage\">\r\n            <div className=\"container text-center\">\r\n                <h1 className=\"mb-4 font-weight-bold\">Jobly</h1>\r\n                <p className=\"lead\">Jobly helps people get their dream jobs.</p>\r\n                {currentUser\r\n                    ? <h2>\r\n                        Welcome Back, {currentUser.firstName || currentUser.username}!\r\n                    </h2>\r\n                    : (\r\n                        <p>\r\n                            <Link className=\"btn btn-primary font-weight-bold mr-3\"\r\n                                to=\"/login\">\r\n                                Log in\r\n                            </Link>\r\n                            <Link className=\"btn btn-primary font-weight-bold\"\r\n                                to=\"/signup\">\r\n                                Sign up\r\n                            </Link>\r\n                        </p>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;\r\n", "import React, { useState } from \"react\";\r\n\r\n//Renders the search form and calls searchFor function prop that runs in \r\n//a parent component to do the search.\r\n\r\nconst SearchForm = ({ searchFor }) => {\r\n    console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    //Tells the parent to do the search\r\n    const handleSubmit = (evt) => {\r\n        //handles mistakenly atempt to search for just spaces.\r\n        evt.preventDefault();\r\n        searchFor(searchTerm.trim() || undefined);\r\n        setSearchTerm(searchTerm.trim());\r\n    }\r\n\r\n    //Update the form fields\r\n    const handleChange = (evt) => {\r\n        setSearchTerm(evt.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <form className=\"form-inline\" onSubmit={handleSubmit}>\r\n                <input\r\n                    className=\"form-control form-control-lg flex-grow-1\"\r\n                    name=\"searchTerm\"\r\n                    placeholder=\"Enter search term..\"\r\n                    value={searchTerm}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\" className=\"btn btn-lg btn-primary\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchForm;", "import React from \"react\";\r\nimport { Link } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { Card, CardTitle, CardFooter } from \"reactstrap\";\r\n\r\n/**\r\n * \r\n */\r\n\r\nconst CompanyCard = ({ name, description, logoUrl, handle }) => {\r\n\r\n    return (\r\n        <Link to={`/companies/${handle}`}>\r\n            <Card>\r\n                <CardTitle>\r\n                    {name}\r\n                    {logoUrl && <img src={logoUrl}\r\n                        alt={name}\r\n                        className=\"float-right ml-5\"\r\n                    />}\r\n                </CardTitle>\r\n                <CardFooter>\r\n                    {description}\r\n                </CardFooter>\r\n            </Card>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default CompanyCard;", "import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** User login with username and password */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Sign-up for Jobly */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save edited user profile */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  /**Get the current user */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get companies by company's name, if company is not found return undefined */\n\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  /** Get list of jobs */\n\n  static async getJobs(title) {\n    let res = await this.request(\"jobs\", { title });\n    return res.jobs;\n  }\n\n  /** Apply for a job */\n\n  static async applyToJob(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n}\n\nexport default JoblyApi;\n\n// // for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//   \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//   \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n", "import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { solid } from '@fortawesome/fontawesome-svg-core/import.macro'\r\n\r\nconst LoadingSpinner = () => {\r\n    return (\r\n        <FontAwesomeIcon icon={solid(\"spinner\")} />\r\n    )\r\n}\r\n\r\nexport default LoadingSpinner;", "import React, { useState, useEffect } from \"react\";\r\nimport SearchForm from '../common/SearchForm';\r\nimport CompanyCard from './CompanyCard';\r\nimport JoblyApi from '../api';\r\nimport LoadingSpinner from '../common/LoadingSpinner';\r\n\r\n/**\r\n * Renders page with a list of companies.\r\n * Loads filtered companies on submit from search form.\r\n * route -> /companies\r\n*/\r\n\r\nconst CompanyList = () => {\r\n    console.debug(\"CompanyList\");\r\n\r\n    const [companies, setCompanies] = useState(null);\r\n\r\n    //get companies from API\r\n    useEffect(() => {\r\n        console.debug(\"CompanyList useEffect\");\r\n        search();\r\n    }, []);\r\n\r\n    //Activated by the search from submit, reloads companies \r\n    async function search(name) {\r\n        let companies = await JoblyApi.getCompanies(name);\r\n        setCompanies(companies);\r\n    }\r\n\r\n    if (!companies) return <LoadingSpinner />;\r\n\r\n    return (\r\n        <div className=\"CompanyList col-md-8 offset-md-2\">\r\n            <SearchForm searchFor={search} />\r\n            {companies.length ? (\r\n                <div className=\"CompanyList-list\">\r\n                    {companies.map(c => (\r\n                        <CompanyCard\r\n                            key={c.handle}\r\n                            handle={c.handle}\r\n                            name={c.name}\r\n                            description={c.description}\r\n                            logoUrl={c.logoUrl}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p className=\"lead\">Results were not found!</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompanyList;\r\n", "import React, { useContext, useState, useEffect } from \"react\";\r\nimport \"./JobCard.css\";\r\nimport UserContext from \"../auth/UserContext\";\r\n\r\n/** Show limited information about a job.\r\n *\r\n * Is rendered by JobCardList to show a \"card\" for each job.\r\n *\r\n * Receives apply func prop from parent, which is called on apply.\r\n *\r\n * JobCardList -> JobCard\r\n */\r\n\r\nfunction JobCard({ id, title, salary, equity, companyName }) {\r\n    console.debug(\"JobCard\");\r\n\r\n    const { hasAppliedToJob, applyToJob } = useContext(UserContext);\r\n    const [applied, setApplied] = useState();\r\n\r\n    useEffect(function updateAppliedStatus() {\r\n        console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\r\n\r\n        setApplied(hasAppliedToJob(id));\r\n    }, [id, hasAppliedToJob]);\r\n\r\n    /** Apply for a job */\r\n    async function handleApply(evt) {\r\n        if (hasAppliedToJob(id)) return;\r\n        applyToJob(id);\r\n        setApplied(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"JobCard card\"> {applied}\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{title}</h6>\r\n                <p>{companyName}</p>\r\n                {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\r\n                {equity !== undefined && <div><small>Equity: {equity}</small></div>}\r\n                <button\r\n                    className=\"btn btn-danger font-weight-bold text-uppercase float-right\"\r\n                    onClick={handleApply}\r\n                    disabled={applied}\r\n                >\r\n                    {applied ? \"Applied\" : \"Apply\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n/** Render integer salary like '$1,250,343' */\r\n\r\nfunction formatSalary(salary) {\r\n    const digitsRev = [];\r\n    const salaryStr = salary.toString();\r\n\r\n    for (let i = salaryStr.length - 1; i >= 0; i--) {\r\n        digitsRev.push(salaryStr[i]);\r\n        if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\r\n    }\r\n\r\n    return digitsRev.reverse().join(\"\");\r\n}\r\n\r\n\r\nexport default JobCard;\r\n\r\n", "import React from \"react\";\r\nimport JobCard from \"./JobCard\";\r\n\r\n/**\r\n * Shows the jobs list.\r\n * Used by both JobList and CompanyDetail to list jobs. \r\n * Receives an apply func prop which will be called by JobCard on apply.\r\n */\r\n\r\nconst JobCardList = ({ jobs, apply }) => {\r\n    console.debug(\"JobCardList\", \"jobs=\", jobs);\r\n\r\n    return (\r\n        <div className=\"JobCardList\">\r\n            {jobs.map(job => (\r\n                <JobCard\r\n                    key={job.id}\r\n                    id={job.id}\r\n                    title={job.title}\r\n                    salary={job.salary}\r\n                    equity={job.equity}\r\n                    companyName={job.companyName}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JobCardList;", "import React, { useState, useEffect } from \"react\";\r\nimport SearchForm from \"../common/SearchForm\";\r\nimport JoblyApi from '../api';\r\nimport JoblyCardList from './JobCardList';\r\nimport LoadingSpinner from '../common/LoadingSpinner';\r\n\r\n/**\r\n * Renders the page with the list of Jobs.\r\n * Loads jobs from API.\r\n * Re-loads filtered jobs on submit from search form.\r\n */\r\n\r\nconst JobList = () => {\r\n    console.debug(\"JobList\");\r\n\r\n    const [jobs, setJobs] = useState(null);\r\n\r\n    useEffect(() => {\r\n        console.debug(\"JobList useEffect\");\r\n        search();\r\n    }, []);\r\n\r\n    /** Triggered by search form submit; reloads jobs. */\r\n    async function search(title) {\r\n        let jobs = await JoblyApi.getJobs(title);\r\n        setJobs(jobs);\r\n    }\r\n\r\n    if (!jobs) return <LoadingSpinner />;\r\n\r\n    return (\r\n        <div className=\"JobList col-md-8 offset-md-2\">\r\n            <SearchForm searchFor={search} />\r\n            {jobs.length\r\n                ? <JoblyCardList jobs={jobs} />\r\n                : <p className=\"lead\">Sorry, no results were found!</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JobList;", "import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport JoblyApi from '../api';\r\nimport JobCardList from '../jobs/JobCardList';\r\nimport LoadingSpinner from \"../common/LoadingSpinner\";\r\n\r\n/**\r\n * Renders info about a company along with the jobs available at that company.\r\n * route -> /companies/:handle\r\n */\r\n\r\nconst CompanyDetail = () => {\r\n\r\n    const { handle } = useParams();\r\n    console.debug(\"CompanyDetail\", \"handle=\", handle);\r\n\r\n    const [company, setCompany] = useState(null);\r\n\r\n    //get company and jobs for a user\r\n    useEffect(() => {\r\n        async function getCompany() {\r\n            setCompany(await JoblyApi.getCompany(handle));\r\n        }\r\n        getCompany();\r\n    }, [handle]);\r\n\r\n    if (!company) return <LoadingSpinner />;\r\n\r\n    return (\r\n        <div className=\"col-md-8 offset-md-2\">\r\n            <h3>{company.name}</h3>\r\n            <p>{company.description}</p>\r\n            <JobCardList jobs={company.jobs} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompanyDetail;", "import React from \"react\";\r\n\r\n//Alert component for showing bootstrap style alerts.\r\n\r\nconst Alert = ({ type = \"danger\", messages = [] }) => {\r\n    console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\r\n\r\n    return (\r\n        <div className={`alert alert-${type}`} role=\"alert\">\r\n            {messages.map(err => (\r\n                <p className=\"mb-0 small\" key={err}>\r\n                    {err}\r\n                </p>\r\n            ))};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alert;", "import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/**\r\n * Login form.\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls login function prop\r\n * - redirects to /companies route\r\n */\r\n\r\nconst LoginForm = ({ login }) => {\r\n    const history = useHistory();\r\n    const [formData, setFormData] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    });\r\n    const [formErrors, setFormErrors] = useState([]);\r\n\r\n    console.debug(\r\n        \"LoginForm\",\r\n        \"login=\", typeof login,\r\n        \"formData=\", formData,\r\n        \"formErrors\", formErrors,\r\n    );\r\n\r\n    //Handle form submit\r\n    //Calls login func prop and, if successful, redirect to /companies.\r\n\r\n    async function handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        let res = await login(formData);\r\n        if (res.success) {\r\n            history.push('/companies');\r\n        } else {\r\n            setFormErrors(res.errors);\r\n        }\r\n    }\r\n\r\n    //Updates the form data field.\r\n    function handleChange(evt) {\r\n        const { name, value } = evt.target;\r\n        setFormData(l => ({ ...l, [name]: value }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"LoginForm\">\r\n            <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n                <h3 className=\"mb-3\">Log In</h3>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label>Username</label>\r\n                                <input\r\n                                    name=\"username\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.username}\r\n                                    onChange={handleChange}\r\n                                    autoComplete=\"username\"\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.password}\r\n                                    onChange={handleChange}\r\n                                    autoComplete=\"current-password\"\r\n                                    required\r\n                                />\r\n                            </div>\r\n\r\n                            {formErrors.length\r\n                                ? <Alert type=\"danger\" messages={formErrors} />\r\n                                : null}\r\n\r\n                            <button\r\n                                className=\"btn btn-primary float-right\"\r\n                                onSubmit={handleSubmit}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LoginForm;", "import React, { useState, useContext } from \"react\";\r\nimport Alert from \"../common/Alert\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport JoblyApi from \"../api\";\r\n\r\n// eslint-disable-next-line\r\nimport useTimedMessage from \"../hooks/useTimedMessage\";\r\n\r\n/** Profile editing form.\r\n *\r\n * Displays profile form and handles changes to local form state.\r\n * Submitting the form calls the API to save, and triggers user reloading\r\n * throughout the site.\r\n *\r\n * Confirmation of a successful save is normally a simple <Alert>, but\r\n * you can opt-in to our fancy limited-time-display message hook,\r\n * `useTimedMessage`, but switching the lines below.\r\n * */\r\n\r\nconst ProfileForm = () => {\r\n    const { currentUser, setCurrentUser } = useContext(UserContext);\r\n    const [formData, setFormData] = useState({\r\n        firstName: currentUser.firstName,\r\n        lastName: currentUser.lastName,\r\n        email: currentUser.email,\r\n        username: currentUser.username,\r\n        password: \"\",\r\n    });\r\n\r\n    const [formErrors, setFormErrors] = useState([]);\r\n\r\n    // switch to use our fancy limited-time-display message hook\r\n    const [saveConfirmed, setSaveConfirmed] = useState(false);\r\n    // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\r\n\r\n    console.debug(\r\n        \"ProfileForm\",\r\n        \"currentUser=\", currentUser,\r\n        \"formData=\", formData,\r\n        \"formErrors=\", formErrors,\r\n        \"saveConfirmed=\", saveConfirmed,\r\n    );\r\n\r\n    /** on form submit:\r\n   * - attempt save to backend & report any errors\r\n   * - if successful\r\n   *   - clear previous error messages and password\r\n   *   - show save-confirmed message\r\n   *   - set current user info throughout the site\r\n   */\r\n\r\n    async function handleSubmit(evt) {\r\n        evt.preventDefault();\r\n\r\n        let profileData = {\r\n            firstName: formData.firstName,\r\n            lastName: formData.lastName,\r\n            email: formData.email,\r\n            password: formData.password,\r\n        };\r\n\r\n        let username = formData.username;\r\n        let updatedUser;\r\n\r\n        try {\r\n            updatedUser = await JoblyApi.saveProfile(username, profileData);\r\n        } catch (errors) {\r\n            debugger;\r\n            setFormErrors(errors);\r\n            return;\r\n        }\r\n\r\n        setFormData(f => ({ ...f, password: \"\" }));\r\n        setFormErrors([]);\r\n        setSaveConfirmed(true);\r\n\r\n        // trigger reloading of user information throughout the site\r\n        setCurrentUser(updatedUser);\r\n    }\r\n\r\n    /** Handle form data changing */\r\n    function handleChange(evt) {\r\n        const { name, value } = evt.target;\r\n        setFormData(f => ({\r\n            ...f,\r\n            [name]: value,\r\n        }));\r\n        setFormErrors([]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\r\n            <h3>Profile</h3>\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label>Username</label>\r\n                            <p className=\"form-control-plaintext h5\">{formData.username}</p>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>First Name</label>\r\n                            <input\r\n                                name=\"firstName\"\r\n                                className=\"form-control\"\r\n                                value={formData.firstName}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Last Name</label>\r\n                            <input\r\n                                name=\"lastName\"\r\n                                className=\"form-control\"\r\n                                value={formData.lastName}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                value={formData.email}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Confirm password to make changes:</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className=\"form-control\"\r\n                                value={formData.password}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </div>\r\n\r\n                        {formErrors.length\r\n                            ? <Alert type=\"danger\" messages={formErrors} />\r\n                            : null}\r\n\r\n                        {saveConfirmed\r\n                            ?\r\n                            <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\r\n                            : null}\r\n\r\n                        <button\r\n                            className=\"btn btn-primary btn-block mt-4\"\r\n                            onClick={handleSubmit}\r\n                        >\r\n                            Save Changes\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileForm;", "import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from \"../common/Alert\";\r\n\r\n/**\r\n * Signup form.\r\n * Shows form and manages update to state on changes.\r\n * On submission:\r\n * - calls signup function prop\r\n * - redirects to /companies route\r\n */\r\n\r\nconst signupForm = ({ signup }) => {\r\n    const history = useHistory();\r\n\r\n    const [formData, setFormData] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n    });\r\n\r\n    const [formErrors, setFormErrors] = useState([]);\r\n\r\n    console.debug(\r\n        \"SignupForm\",\r\n        \"signup=\", typeof signup,\r\n        \"formData=\", formData,\r\n        \"formErrors=\", formErrors,\r\n    );\r\n\r\n    /** Handle form submit:\r\n   *\r\n   * Calls login func prop and, if successful, redirect to /companies.\r\n   */\r\n\r\n    async function handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        let result = await signup(formData);\r\n        if (result.success) {\r\n            history.push(\"/companies\");\r\n        } else {\r\n            setFormErrors(result.errors);\r\n        }\r\n    }\r\n\r\n    //update formdata fields\r\n\r\n    function handleChange(evt) {\r\n        const { name, value } = evt.target;\r\n\r\n        setFormData(data => ({ ...data, [name]: value }));\r\n    }\r\n\r\n    return (\r\n        <div className=\"SignupForm\">\r\n            <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\r\n                <h2 className=\"mb-3\">Sign Up</h2>\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label>Username</label>\r\n                                <input\r\n                                    name=\"username\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.username}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.password}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label>First name</label>\r\n                                <input\r\n                                    name=\"firstName\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.firstName}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Last name</label>\r\n                                <input\r\n                                    name=\"lastName\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.lastName}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Email</label>\r\n                                <input\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    className=\"form-control\"\r\n                                    value={formData.email}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                />\r\n                            </div>\r\n\r\n                            {formErrors.length\r\n                                ? <Alert type=\"danger\" messages={formErrors} />\r\n                                : null\r\n                            }\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-primary float-right\"\r\n                                onSubmit={handleSubmit}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default signupForm;", "import React, { useContext } from \"react\";\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport UserContext from '../auth/UserContext'\r\n\r\n/** This private route component will verify if the current user is a \r\n * valid user. If the user is not authorized, the route will not continue\r\n * and the user will be Redirected to the /login page.\r\n */\r\n\r\nconst PrivateRoute = ({exact, path, children}) => {\r\n    const {currentUser} = useContext(UserContext);\r\n\r\n    console.debug(\r\n        \"PrivateRoute\", \r\n        \"exact=\", exact,\r\n        \"path=\", path,\r\n        \"currentUser=\", currentUser,\r\n    );\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n        <Route exact={exact} path={path}>\r\n            {children}\r\n        </Route>\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;", "import React from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Homepage from \"../homepage/Homepage\";\r\nimport CompanyList from \"../companies/CompanyList\";\r\nimport JobList from \"../jobs/JobList\";\r\nimport CompanyDetail from \"../companies/CompanyDetail\";\r\nimport LoginForm from \"../auth/LoginForm\";\r\nimport ProfileForm from \"../profiles/ProfileForm\";\r\nimport SignupForm from \"../auth/SignupForm\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\n/** Routes for the Jobly\r\n * Sections of the App is only visible for logged in users.\r\n * <PivateRoute component is the auth component.\r\n */\r\n\r\nconst Routes = ({ login, signup }) => {\r\n\r\n    console.debug(\r\n        \"Routes\",\r\n        `login=${typeof login}`,\r\n        `register=${typeof register}`,\r\n    );\r\n\r\n    return (\r\n        <div className=\"pt-5\">\r\n            <Switch>\r\n\r\n                <Route exact path='/'>\r\n                    <Homepage />\r\n                </Route>\r\n\r\n                <Route exact path='/login'>\r\n                    <LoginForm login={login} />\r\n                </Route>\r\n\r\n                <Route exact path='/signup'>\r\n                    <SignupForm signup={signup} />\r\n                </Route>\r\n\r\n                <PrivateRoute exact path='/companies'>\r\n                    <CompanyList />\r\n                </PrivateRoute>\r\n\r\n                <PrivateRoute exact path='/jobs'>\r\n                    <JobList />\r\n                </PrivateRoute>\r\n\r\n                <PrivateRoute exact path=\"/companies/:handle\">\r\n                    <CompanyDetail />\r\n                </PrivateRoute>\r\n\r\n                <PrivateRoute path=\"/profile\">\r\n                    <ProfileForm />\r\n                </PrivateRoute>\r\n\r\n                <Redirect to=\"/\" />\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;", "import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage.js\";\nimport NavBar from './nav/NavBar';\nimport Routes from './routes/Routes';\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport JoblyApi from \"./api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n/**\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n */\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n\nfunction App() {\n\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n\n    setInfoLoaded(false);\n    getCurrentUser();\n\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   * Automatically logs them in (set token) upon signup.\n   * Make sure you await this function and check its return value!\n   */\n\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (err) {\n      console.error(\"signup falied\", err);\n      return { success: false, err };\n    }\n  }\n\n  /** Handles site-wide login.\n * Make sure you await this function and check its return value!\n */\n\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (err) {\n      console.error(\"login failed\", err);\n      return { success: false, err };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  // Apply to a job: make API call and update set of application IDs.\n\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider\n        value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n        <div className=\"App\">\n          <NavBar logout={logout} />\n          <Routes login={login} signup={signup} />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n", "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n", "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],
    "sourceRoot": ""
}